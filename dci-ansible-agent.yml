---
# Initial Step:
#
# Schedule a new job giving a specific topic and specifying the remote CI.
# The return of this action contains all the data associated with the job,
# we hence register those data for later consumptions
#
- hosts: localhost
  tasks:
    - name: Schedule a new job
      dci_job:
        components: '{{ dci_components|default([]) }}'
        topic: '{{ dci_topic }}'
      register: job_informations

    - set_fact:
        job_id: '{{ hostvars.localhost.job_informations.job.id }}'
        components: '{{ hostvars.localhost.job_informations.job.components }}'
    - name: Set the metadata
      dci_job:
        id: "{{ job_informations.job.id }}"
        metadata: '{{ dci_metadata }}'
      when: dci_metadata is defined and dci_metadata

- name: 'Sanity check'
  hosts: localhost
  vars:
    dci_status: 'new'
  tasks:
    - block:
      - name: Check the jumpbox sanity
        include: plays/sanity_check.yml

      - include: plays/purge_cache.yml

      - include: plays/prepare_local_mirror.yml

      - include: plays/fetch_bits.yml

      - set_fact:
          dci_status: 'pre-run'

      - include: '{{ dci_config_dir }}/hooks/pre-run.yml'

      rescue:
      - include: "{{ dci_config_dir }}/hooks/teardown.yml"
        when: dci_teardown_on_failure is defined and dci_teardown_on_failure

      - include: plays/failure.yml


# Run state
#
# User is free to do whaterver she needs before entering running state.
# Usually this is used to provision both undercloud and the overcloud.
#
- name: 'Provision the undercloud and the overcloud'
  hosts: localhost
  vars:
    dci_status: 'running'
  tasks:
    - block:
      - include: '{{ dci_config_dir }}/hooks/running.yml'

      - include: plays/register_undercloud_host.yml

      rescue:
      # Included a second time in case of failure in hooks/running.yml,
      # this is required for collect-logs to work
      - include: plays/register_undercloud_host.yml

      - include: plays/collect_logs.yml
      - include: "{{ dci_config_dir }}/hooks/teardown.yml"
        when: dci_teardown_on_failure is defined and dci_teardown_on_failure

      - include: plays/failure.yml


- hosts: all:localhost
  vars:
    rhos_release:
      OSP8: 'liberty'
      OSP9: 'mitaka'
      OSP10: 'newton'
      OSP11: 'ocata'
      OSP12: 'pike'
      RDO-Newton: 'newton'
      RDO-Ocata: 'ocata'
      RDO-Pike: 'pike'
  tasks:
    - name: Declare facts on all hosts
      set_fact:
        job_id: '{{ hostvars.localhost.job_informations.job.id }}'
        components: '{{ hostvars.localhost.job_informations.job.components }}'
        release: '{{ rhos_release[dci_topic] }}'


# Post-run state
#
# User is free to do whaterver she needs before entering post-run state.
# Usually this is used to run tests, certifications, etc...
#
- name: 'Running tests'
  hosts: 'undercloud'
  tasks:
    - block:
      - include: play/run_tests.yml

      - include: plays/collect_logs.yml

      rescue:
      - include: plays/collect_logs.yml

      - include: "{{ dci_config_dir }}/hooks/teardown.yml"
        when: dci_teardown_on_failure is defined and dci_teardown_on_failure
        delegate_to: localhost

      - include: plays/failure.yml
        delegate_to: localhost


- name: 'Upload files'
  hosts: localhost
  vars:
    dci_status: 'post-run'
  tasks:
    - block:
      - include: plays/upload_logs.yml

      rescue:
      - include: "{{ dci_config_dir }}/hooks/teardown.yml"
        when: dci_teardown_on_failure is defined and dci_teardown_on_failure

      - include: plays/failure.yml


# Success state
#
# User is free to do whaterver she needs before entering pre-run state.
# Usually this is used to teardown the plateform
#
- name: 'Successful installation'
  hosts: localhost
  vars:
    dci_status: 'success'
  tasks:
    - include: "{{ dci_config_dir }}/hooks/success.yml"

    - include: "{{ dci_config_dir }}/hooks/teardown.yml"
